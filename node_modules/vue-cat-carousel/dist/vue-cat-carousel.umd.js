(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = global || self, factory(global['vue-cat-carousel'] = {}));
}(this, (function (exports) { 'use strict';

  var WIDTH_PAGE = 100;
  var SWIPE_THRESHOLD = 80;
  var CENTER_MODE_DEFAULT_CONFIG = {
    enabled: false,
    paddingCenter: 10
  };
  var INDICATORS_DEFAULT_CONFIG = {
    size: 16,
    color: '#d6d6d6',
    activeColor: '#0095da',
    hideIndicators: false
  };

  var script = {
    name: 'CatCarousel',
    props: {
      items: {
        type: Array,
        default: [],
        required: true
      },
      itemPerPage: {
        type: Number,
        default: 5
      },
      indicatorsConfig: {
        type: Object,
        default: function () {
          return INDICATORS_DEFAULT_CONFIG
        }
      },
      centerMode: {
        type: Object,
        default: function () {
          return CENTER_MODE_DEFAULT_CONFIG
        }
      },
      prefix: {
        type: String,
        default: ''
      }
    },
    data: function data () {
      return {
        wrapper: {
          translateX: 0
        },
        maxSlide: 0,
        track: 0,
        slides: [],
        normalSlideWindow: [],
        reversedSlideWindow: [],
        touchX: null
      }
    },
    mounted: function mounted () {
      this.maxSlide = Math.ceil(this.items.length / this.itemPerPage);
      this.initSlides();
    },
    watch: {
      items: function items () {
        this.wrapper = {
          translateX: 0
        };
        this.track = 0;
        this.maxSlide = Math.ceil(this.items.length / this.itemPerPage);
        this.initSlides();
      },
      track: function track (val) {
        this.$emit('change', val);
      }
    },
    computed: {
      carouselContent: function carouselContent () {
        return this.$refs.carouselContent
      },
      carouselItem: function carouselItem () {
        return this.$refs.carouselItem
      },
      carouselWrapper: function carouselWrapper () {
        return this.$refs.carouselWrapper
      },
      itemWidth: function itemWidth () {
        return this.carouselItem && this.carouselItem.length > 0 && this.carouselItem[0].clientWidth
      },
      wrapperStyles: function wrapperStyles () {
        if (this.centerMode.enabled) {
          return {transform: ("translateX(calc(" + (this.wrapper.translateX) + "px + " + (this.centerMode.paddingCenter) + "%)")}
        }

        return {transform: ("translateX(" + (this.wrapper.translateX) + "px)")}
      },
      onFirstPage: function onFirstPage () {
        return this.track === 0
      },
      onLastPage: function onLastPage () {
        return this.track === this.maxSlide - 1
      },
      carouselItemStyles: function carouselItemStyles () {
        var width = WIDTH_PAGE / this.itemPerPage;

        if (this.centerMode.enabled) {
          width = width * (1 - this.centerMode.paddingCenter / 100 * 2);
        }

        return {
          flex: ("0 0 " + width + "%"),
          width: (width + "%")
        }
      },
      carouselCurrentFirstActiveIndex: function carouselCurrentFirstActiveIndex () {
        return this.track * this.itemPerPage
      },
      carouselCurrentLastActiveIndex: function carouselCurrentLastActiveIndex () {
        return (this.track + 1) * this.itemPerPage - 1
      },
      indicatorsItemSizeStyle: function indicatorsItemSizeStyle () {
        var size = this.indicatorsConfig.size || INDICATORS_DEFAULT_CONFIG.size;
        return {
          width: (size + "px"),
          height: (size + "px"),
          backgroundColor: this.indicatorsConfig.color || INDICATORS_DEFAULT_CONFIG.color
        }
      },
      activeIndicatorStyle: function activeIndicatorStyle () {
        return {
          backgroundColor: this.indicatorsConfig.activeColor || INDICATORS_DEFAULT_CONFIG.activeColor
        }
      },
      hideIndicators: function hideIndicators () {
        return this.indicatorsConfig.hideIndicators || INDICATORS_DEFAULT_CONFIG.hideIndicators
      }
    },
    methods: {
      initSlides: function initSlides () {
        this.slides = this.addSlides(this.items.length);
        this.initialSlides = this.slides;
        this.reversedSlides = this.slides.slice().reverse();
      },
      addSlides: function addSlides (itemsLength) {
        if (itemsLength <= 0) { return [] }
        var count = Math.min(itemsLength, this.itemPerPage);
        var slides = [];
        slides = slides.concat([count], this.addSlides(itemsLength-count));
        return slides
      },
      prev: function prev () {
        if (this.onFirstPage) { return }
        this.track--;
        this.wrapper = Object.assign({}, this.wrapper,{
          translateX: this.wrapper.translateX + this.slides[this.track] * this.itemWidth
        });
        if (this.onFirstPage) { this.slides = this.initialSlides; }
      },
      next: function next () {
        if (this.onLastPage) { return }
        this.track++;
        this.wrapper = Object.assign({}, this.wrapper, {
          translateX: this.wrapper.translateX - this.slides[this.track] * this.itemWidth
        });
        if (this.onLastPage) { this.slides = this.reversedSlides; }
      },
      selectedIndicator: function selectedIndicator (index) {
        return index === this.track + 1
      },
      touchStart: function touchStart (event) {
        this.touchX = event.touches[0].clientX;
      },
      touchMove: function touchMove (event) {
        if (!this.touchX) { return }
        var currentX = event.touches[0].clientX;
        var diffX = currentX - this.touchX;
        if (diffX > SWIPE_THRESHOLD) {
          this.prev();
          this.touchX = null;
        }
        if (diffX < -SWIPE_THRESHOLD) {
          this.next();
          this.touchX = null;
        }
      }
    }
  };

  function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier /* server only */, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
      if (typeof shadowMode !== 'boolean') {
          createInjectorSSR = createInjector;
          createInjector = shadowMode;
          shadowMode = false;
      }
      // Vue.extend constructor export interop.
      var options = typeof script === 'function' ? script.options : script;
      // render functions
      if (template && template.render) {
          options.render = template.render;
          options.staticRenderFns = template.staticRenderFns;
          options._compiled = true;
          // functional template
          if (isFunctionalTemplate) {
              options.functional = true;
          }
      }
      // scopedId
      if (scopeId) {
          options._scopeId = scopeId;
      }
      var hook;
      if (moduleIdentifier) {
          // server build
          hook = function (context) {
              // 2.3 injection
              context =
                  context || // cached call
                      (this.$vnode && this.$vnode.ssrContext) || // stateful
                      (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext); // functional
              // 2.2 with runInNewContext: true
              if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
                  context = __VUE_SSR_CONTEXT__;
              }
              // inject component styles
              if (style) {
                  style.call(this, createInjectorSSR(context));
              }
              // register component module identifier for async chunk inference
              if (context && context._registeredComponents) {
                  context._registeredComponents.add(moduleIdentifier);
              }
          };
          // used by ssr in case component is cached and beforeCreate
          // never gets called
          options._ssrRegister = hook;
      }
      else if (style) {
          hook = shadowMode
              ? function (context) {
                  style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
              }
              : function (context) {
                  style.call(this, createInjector(context));
              };
      }
      if (hook) {
          if (options.functional) {
              // register for functional component in vue file
              var originalRender = options.render;
              options.render = function renderWithStyleInjection(h, context) {
                  hook.call(context);
                  return originalRender(h, context);
              };
          }
          else {
              // inject component registration as beforeCreate hook
              var existing = options.beforeCreate;
              options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
          }
      }
      return script;
  }

  var isOldIE = typeof navigator !== 'undefined' &&
      /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
  function createInjector(context) {
      return function (id, style) { return addStyle(id, style); };
  }
  var HEAD;
  var styles = {};
  function addStyle(id, css) {
      var group = isOldIE ? css.media || 'default' : id;
      var style = styles[group] || (styles[group] = { ids: new Set(), styles: [] });
      if (!style.ids.has(id)) {
          style.ids.add(id);
          var code = css.source;
          if (css.map) {
              // https://developer.chrome.com/devtools/docs/javascript-debugging
              // this makes source maps inside style tags work properly in Chrome
              code += '\n/*# sourceURL=' + css.map.sources[0] + ' */';
              // http://stackoverflow.com/a/26603875
              code +=
                  '\n/*# sourceMappingURL=data:application/json;base64,' +
                      btoa(unescape(encodeURIComponent(JSON.stringify(css.map)))) +
                      ' */';
          }
          if (!style.element) {
              style.element = document.createElement('style');
              style.element.type = 'text/css';
              if (css.media)
                  { style.element.setAttribute('media', css.media); }
              if (HEAD === undefined) {
                  HEAD = document.head || document.getElementsByTagName('head')[0];
              }
              HEAD.appendChild(style.element);
          }
          if ('styleSheet' in style.element) {
              style.styles.push(code);
              style.element.styleSheet.cssText = style.styles
                  .filter(Boolean)
                  .join('\n');
          }
          else {
              var index = style.ids.size - 1;
              var textNode = document.createTextNode(code);
              var nodes = style.element.childNodes;
              if (nodes[index])
                  { style.element.removeChild(nodes[index]); }
              if (nodes.length)
                  { style.element.insertBefore(textNode, nodes[index]); }
              else
                  { style.element.appendChild(textNode); }
          }
      }
  }

  /* script */
  var __vue_script__ = script;

  /* template */
  var __vue_render__ = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{staticClass:"cat-carousel-container"},[_c('div',{class:['cat-carousel__navigation', {'cat-carousel__navigation--end': _vm.onFirstPage}]},[[_vm._t("prev-navigation",[_c('div',{staticClass:"cat-carousel__default-nav cat-carousel__default-nav--left",on:{"click":_vm.prev}},[_c('img',{attrs:{"src":"https://www.static-src.com/siva/asset//07_2020/arrow-blue-small.png"}})])],{"prev":_vm.prev})]],2),_vm._v(" "),_c('div',{ref:"carouselContent",staticClass:"cat-carousel__content"},[_c('div',{ref:"carouselWrapper",staticClass:"cat-carousel__content__wrapper",style:(_vm.wrapperStyles),on:{"touchstart":_vm.touchStart,"touchmove":_vm.touchMove}},_vm._l((_vm.items),function(item,index){return _c('div',{key:_vm.prefix + index,ref:"carouselItem",refInFor:true,staticClass:"cat-carousel__content__wrapper__item",class:{ 'active': _vm.carouselCurrentFirstActiveIndex <= item && item <= _vm.carouselCurrentLastActiveIndex },style:(_vm.carouselItemStyles)},[[_vm._t("item",null,{"data":item,"index":index})]],2)}),0)]),_vm._v(" "),_c('div',{class:['cat-carousel__navigation cat-carousel__navigation__next',
                 {'cat-carousel__navigation--end': _vm.onLastPage}]},[[_vm._t("next-navigation",[_c('div',{staticClass:"cat-carousel__default-nav",on:{"click":_vm.next}},[_c('img',{attrs:{"src":"https://www.static-src.com/siva/asset//07_2020/arrow-blue-small.png"}})])],{"next":_vm.next})]],2)]),_vm._v(" "),_c('div',{staticClass:"cat-carousel__indicators",class:{'hide': _vm.hideIndicators}},_vm._l((_vm.maxSlide),function(index){return _c('div',{key:index,staticClass:"cat-carousel__indicators__item",class:{ 'active': (_vm.track + 1) === index },style:([_vm.indicatorsItemSizeStyle, _vm.selectedIndicator(index) && _vm.activeIndicatorStyle])})}),0)])};
  var __vue_staticRenderFns__ = [];

    /* style */
    var __vue_inject_styles__ = function (inject) {
      if (!inject) { return }
      inject("data-v-79a8071c_0", { source: ".cat-carousel-container[data-v-79a8071c]{display:flex;position:relative;width:100%;height:100%;margin:0 auto}.cat-carousel__content[data-v-79a8071c]{width:100%;overflow:hidden;display:inline-block}.cat-carousel__content__wrapper[data-v-79a8071c]{transition:transform .5s ease-out;display:flex;align-items:flex-start;height:100%}.cat-carousel__content__wrapper__item[data-v-79a8071c]{box-sizing:border-box;padding:0 1%;display:flex;height:100%}.cat-carousel__navigation[data-v-79a8071c]{display:flex;align-self:center;position:absolute;z-index:2}.cat-carousel__navigation__next[data-v-79a8071c]{right:0}.cat-carousel__navigation--end[data-v-79a8071c]{display:none}.cat-carousel__default-nav[data-v-79a8071c]{width:48px;height:48px;opacity:.88;box-shadow:0 0 24px -4px rgba(0,0,0,.24);background-color:#fff;display:flex;justify-content:center;align-content:center;align-items:center;border-radius:50%;border-right:1px solid #eee;cursor:pointer;z-index:2}@media only screen and (max-width:768px){.cat-carousel__default-nav[data-v-79a8071c]{display:none}}.cat-carousel__default-nav img[data-v-79a8071c]{width:34px;height:34px}.cat-carousel__default-nav--left img[data-v-79a8071c]{transform:rotate(180deg)}.cat-carousel__indicators[data-v-79a8071c]{display:flex;justify-content:center;margin:8px}.cat-carousel__indicators__item[data-v-79a8071c]{border-radius:50%;margin:0 4px}.hide[data-v-79a8071c]{display:none}", map: undefined, media: undefined });

    };
    /* scoped */
    var __vue_scope_id__ = "data-v-79a8071c";
    /* module identifier */
    var __vue_module_identifier__ = undefined;
    /* functional template */
    var __vue_is_functional_template__ = false;
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    var __vue_component__ = normalizeComponent(
      { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
      __vue_inject_styles__,
      __vue_script__,
      __vue_scope_id__,
      __vue_is_functional_template__,
      __vue_module_identifier__,
      false,
      createInjector,
      undefined,
      undefined
    );

  var plugin = {
    // eslint-disable-next-line no-undef
    version: "0.9.3-6",
    install: function install(Vue) {
      Vue.component(__vue_component__.name, __vue_component__);
    },
  };

  var GlobalVue = null;
  if (typeof window !== 'undefined') {
    GlobalVue = window.Vue;
  } else if (typeof global !== 'undefined') {
    GlobalVue = global.Vue;
  }
  if (GlobalVue) {
    GlobalVue.use(plugin);
  }

  exports.CatCarousel = __vue_component__;
  exports.default = plugin;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
